# **Advanced Lane Finding Project**

The goals / steps of this project are the following:

* Compute the camera calibration matrix and distortion coefficients given a set of chessboard images.
* Apply a distortion correction to raw images.
* Use color transforms, gradients, etc., to create a thresholded binary image.
* Apply a perspective transform to rectify binary image ("birds-eye view").
* Detect lane pixels and fit to find the lane boundary.
* Determine the curvature of the lane and vehicle position with respect to center.
* Warp the detected lane boundaries back onto the original image.
* Output visual display of the lane boundaries and numerical estimation of lane curvature and vehicle position.

[//]: # (Image References)

[image1]: ./output_images/undistorted.jpg "Undistorted"
[image2]: ./output_images/sat.jpg "saturated"
[image3]: ./output_images/canny.jpg "canny"
[image4]: ./output_images/ym.jpg "yellow mask"
[image5]: ./output_images/wk1.jpg "white mask 1"
[image6]: ./output_images/wk2.jpg "white mask 2"
[image7]: ./output_images/wk.jpg "white mask 3"
[image8]: ./output_images/warped.jpg "warped"
[image9]: ./output_images/thresholder3.jpg "thresholded images"
[image10]: ./output_images/skyskip.jpg "sky crop"
[image11]: ./output_images/final.jpg "output"
[image12]: ./output_images/color_masks3.jpg "color mask with canny edges"
[imagea]: ./output_images/red.jpg "red confidence"
[imageb]: ./output_images/green.jpg "green full confidence predd"
[imagey]: ./output_images/ymr.jpg "recommended yellow mask"
[imagew]: ./output_images/wkr.jpg "recommended white_mask"
[imagec]: ./output_images/color_masksr.jpg "recommended color masks"

[video1]: ./output_videos/project_video_20170924-224845.webm "project__Video"
[video2]: ./output_videos/harder_challenge_video_20170924-224331.webm "harder_challenge"
[video3]: ./output_videos/challenge_video_20170924-223723.webm "challenge_video"






### Pipeline (single images)


### Camera Calibration

#### 1.1 Briefly state how you computed the camera matrix and distortion coefficients. Provide an example of a distortion corrected calibration image.
 

I start by preparing "object points", which will be the (x, y, z) coordinates of the chessboard corners in the world. Here I am assuming the chessboard is fixed on the (x, y) plane at z=0, such that the object points are the same for each calibration image.  Thus, `objp` is just a replicated array of coordinates, and `objpoints` will be appended with a copy of it every time I successfully detect all chessboard corners in a test image.  `imgpoints` will be appended with the (x, y) pixel position of each of the corners in the image plane with each successful chessboard detection.  

I then used the output `objpoints` and `imgpoints` to compute the camera calibration and distortion coefficients using the `cv2.calibrateCamera()` function.  I applied this distortion correction to the test image using the `cv2.undistort()` function and obtained this result: 

I uploaded my camera chessboard images and used the above functions to calculate the object points.

![alt text][image1]

### 1.2  CROP THE SKY AND TUNNELS

crop the top part of image containing the sky to remove unncessary detections.
![alt text][image10]
### 1.3 saturate image

converted images to HSV from rgb and saturated the 's' by 2.5 times, which accounts for various situations like rain and snow and their galzing on roads.
To demonstrate this step, I will describe how I apply the distortion correction to one of the test images like this one:

![alt text][image2]
### 1.4 Apply gaussian blur
 I applied gaussian blur on window size of 3x3 to smoothen the image.

    
    
### 1.5 canny edge detector

Apply cv canny edge detector to find edges in the images and save it under a different name.
![alt text][image3]

### 1.6 create masks for white color, yellow color

Created three kinds of white masks to suits various terrain and weather conditions and have one yellow mask.


all color masks are created in HSL COLOR SPACE for better results.


![yellow mask][image4]

![white mask][image7]

corrected mask using reviwers hsv settings

yellow mask recommended

![yellow mask_recommended][imagey]

white mask recomended

![white mask_recommended][imagew]



### 1.7 bitwise canny and color masks

do bitwise && operator on color mask of yellow and canny and store as img1

do bitwise && operator on color mask of white and img1 , the end result is an image containing strips of lanes.


![alt text][image12]

recommended color masks

![color masks_recommended] [imagec]

#### 3. perspective transform martrix

THe points for ipm are :

rc = np.float32([
            [570, 450],
            [710, 450],
            [930, 640],
            [350, 640],
        ])

        dst = np.float32([
            [350, 0],
            [930, 0],
            [930, 720],
            [350, 720],
        ])
This resulted in the following source and destination points:

| Source        | Destination   | 
|:-------------:|:-------------:| 
| 570, 450      | 350, 0        | 
| 710, 450      | 930, 0        |
| 930, 640      | 930, 720      |
| 350, 640      | 350, 720      |

I verified that my perspective transform was working as expected by drawing the `src` and `dst` points onto a test image and its warped counterpart to verify that the lines appear parallel in the warped image.

![alt text][image8]

#### 4. polyfit and mean averaging filter for convolution

I used poly fit in 2nd degree equation to find the coeff A,B on left side and right side,

whenever I cannot find reasonable points for coe-ffs, I designed a mean averaging convolution filter for the A,B values which consists
of 10 past values , which even predicts the coeffs for unidentified lanes and color of the road changes to red if lane detection is bad
and if detection is good it shows green color.

I even show value of confidence on prediction of lanes for safety.



#### 5. Describe how (and identify where in your code) you calculated the radius of curvature of the lane and the position of the vehicle with respect to center.

I calculate this based on centre of lanes on image pixels by using measure curvature function.

![alt text][imagea]

![alt text][imageb]


#### 6. Provide an example image of your result plotted back down onto the road such that the lane area is identified clearly.

used warper function to unwrap to the original mapping.

applied the color path lanes to the original image in the clip.

---
![alt text][image11]

### Pipeline (video)

#### 1. Provide a link to your final video output.  Your pipeline should perform reasonably well on the entire project video (wobbly lines are ok but no catastrophic failures that would cause the car to drive off the road!).

Here's  my output video
project video
![alt text][video1]
link is ./output_videos/project_video_20170924-224845.webm


harder challenge

![alt text][video2]

link is ./output_videos/harder_challenge_video_20170924-224331.webm

challenge video
![alt text][video3] link is ./output_videos/challenge_video_20170924-223723.webm


### future considerations
1. make it real time
2. may be reduce my mean averaging weight filter and may try use median filtering for faster response based on previous values.

###for reviewers

Thanks for wonderful review

The frames you said were not detected is due to high number of frames used in average filters , so for a faster turns it takes few frames to get there to calculate coeffs of a second order curve in polyfit.

Actually I messed up ffmpeg libraries while doing a differnt cv project and I corrected the code as per review long back and was struggling to get ffpmeg libs working to create a video. i tried source compiling it with various configure options and I couldn't succed, so i created the main_image.py to generate images for all the pipeline. some images may not show any info due to the fact that it is just seeing a single image and code is designed for video and some frames may not have color mask info. I attached various color masks output, but in the code i choose reviwers recommended setting, even though it couldn't fetch any masking for the frame I believe it works for other frames and over the video the filter takes care of it.

Thanks a lot.
